name: Build, Push, and Deploy

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_PORT: 3000

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          # JWT
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          # Cloudinary
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          # Google OAuth
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          # Midtrans
          MIDTRANS_CLIENT_KEY: ${{ secrets.MIDTRANS_CLIENT_KEY }}
          MIDTRANS_SERVER_KEY: ${{ secrets.MIDTRANS_SERVER_KEY }}
          MIDTRANS_IS_PRODUCTION: ${{ secrets.MIDTRANS_IS_PRODUCTION }}
          FRONT_END_URL: ${{ secrets.FRONT_END_URL }}
          DOMAIN_COOKIE: ${{ secrets.DOMAIN_COOKIE }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
            export POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"
            export POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}"

            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export JWT_EXPIRATION="${{ secrets.JWT_EXPIRATION }}"
            export CLOUDINARY_CLOUD_NAME="${{ secrets.CLOUDINARY_CLOUD_NAME }}"
            export CLOUDINARY_API_KEY="${{ secrets.CLOUDINARY_API_KEY }}"
            export CLOUDINARY_API_SECRET="${{ secrets.CLOUDINARY_API_SECRET }}"
            export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export MIDTRANS_CLIENT_KEY="${{ secrets.MIDTRANS_CLIENT_KEY }}"
            export MIDTRANS_SERVER_KEY="${{ secrets.MIDTRANS_SERVER_KEY }}"
            export MIDTRANS_IS_PRODUCTION="${{ secrets.MIDTRANS_IS_PRODUCTION }}"
            export FRONT_END_URL="${{ secrets.FRONT_END_URL }}"
            export DOMAIN_COOKIE="${{ secrets.DOMAIN_COOKIE }}"

            # Buat network jika belum ada
            docker network ls | grep kitabisa-network || docker network create kitabisa-network

            # Pull image terbaru
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Hentikan dan hapus container lama
            docker stop kitabisa-be || true
            docker rm kitabisa-be || true

            # Jalankan container baru dengan semua environment variables
            docker run -d \
            --name kitabisa-be \
            --restart unless-stopped \
            -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            -e PORT=${{ env.APP_PORT }} \
            -e JWT_SECRET="$JWT_SECRET" \
            -e JWT_EXPIRATION="$JWT_EXPIRATION" \
            -e CLOUDINARY_CLOUD_NAME="$CLOUDINARY_CLOUD_NAME" \
            -e CLOUDINARY_API_KEY="$CLOUDINARY_API_KEY" \
            -e CLOUDINARY_API_SECRET="$CLOUDINARY_API_SECRET" \
            -e GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
            -e GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \
            -e MIDTRANS_CLIENT_KEY="$MIDTRANS_CLIENT_KEY" \
            -e MIDTRANS_SERVER_KEY="$MIDTRANS_SERVER_KEY" \
            -e MIDTRANS_IS_PRODUCTION="$MIDTRANS_IS_PRODUCTION" \
            -e FRONT_END_URL="$FRONT_END_URL" \
            -e DOMAIN_COOKIE="$DOMAIN_COOKIE" \
            -e DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public" \
            --network kitabisa-network \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            sleep 15 # Tunggu migrasi selesai
            docker logs kitabisa-be | grep -i "migrate\|seed" # Verifikasi

            echo "Deploy selesai!"
            docker logs kitabisa-be --tail 50
